#include "stdafx.h"
#include <cvblob.h>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <memory>
using namespace cv;
using namespace cvb;
using namespace std;


void processVideo(char* videoFilename);


int main(int argc, _TCHAR* argv[])
{
	/*if (argc != 2)
	{
		cout << "Usage: VehicleDetection.exe videofile" << endl;
		return 1;
	}*/
	char* videoFilename = "../Data/video1.avi";
	videoFilename = "F:\\SVN\\OpenCV\\trunk\\VehicleDetection-master\\Data\\video1.avi";
	processVideo(videoFilename);

	cvDestroyAllWindows();
	return 0;
}

void processVideo(char* videoFilename)
{
	Mat frame; // current frame
	Mat fgMaskMOG2; // fg mask fg mask generated by MOG2 method
	Mat bgImg; // background
	Ptr<BackgroundSubtractorMOG2> pMOG2 = createBackgroundSubtractorMOG2(200, 36.0, false); // MOG2 Background subtractor

	while (true)
	{
		VideoCapture capture(videoFilename);
		if (!capture.isOpened())
		{
			cerr << "Unable to open video file: " << videoFilename << endl;
			return;
		}

		int width = (int)capture.get(CV_CAP_PROP_FRAME_WIDTH);
		int height = (int)capture.get(CV_CAP_PROP_FRAME_HEIGHT);

		unique_ptr<IplImage, void(*)(IplImage*)> labelImg(cvCreateImage(cvSize(width, height), IPL_DEPTH_LABEL, 1), 
			[](IplImage* p){ cvReleaseImage(&p); });
		CvBlobs blobs;
		CvTracks tracks;

		while (true)
		{
			// read input data. ESC or 'q' for quitting
			int key = waitKey(1);
			if (key == 'q' || key == 27)
				return;
			if (!capture.read(frame))
				break;

			// update background
			pMOG2->apply(frame, fgMaskMOG2);
			pMOG2->getBackgroundImage(bgImg);
			imshow("BG", bgImg);
			imshow("Original mask", fgMaskMOG2);

			// post process
			medianBlur(fgMaskMOG2, fgMaskMOG2, 5);
			imshow("medianBlur", fgMaskMOG2);
			morphologyEx(fgMaskMOG2, fgMaskMOG2, MORPH_CLOSE, getStructuringElement(MORPH_RECT, Size(5, 5))); // fill black holes
			morphologyEx(fgMaskMOG2, fgMaskMOG2, MORPH_OPEN, getStructuringElement(MORPH_RECT, Size(5, 5))); // fill white holes
			imshow("morphologyEx", fgMaskMOG2);

			// track
			cvLabel(&IplImage(fgMaskMOG2), labelImg.get(), blobs);
			cvFilterByArea(blobs, 64, 10000);
			cvUpdateTracks(blobs, tracks, 10, 90, 30);
			cvRenderTracks(tracks, &IplImage(frame), &IplImage(frame));

			// show
			imshow("Frame", frame);

			key = waitKey(30);
		}
	}
}
